// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(VgaDbContext))]
    [Migration("20240915130145_DbInit")]
    partial class DbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerValue")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answer");
                });

            modelBuilder.Entity("Domain.Entity.HighSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GoldBalance")
                        .HasColumnType("integer");

                    b.Property<string>("LocationDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("highSchool");
                });

            modelBuilder.Entity("Domain.Entity.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("major");
                });

            modelBuilder.Entity("Domain.Entity.MajorType", b =>
                {
                    b.Property<int>("MajorId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonalGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.HasKey("MajorId", "PersonalGroupId");

                    b.HasIndex("PersonalGroupId");

                    b.ToTable("major_type");
                });

            modelBuilder.Entity("Domain.Entity.PersonalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.ToTable("personal_group");
                });

            modelBuilder.Entity("Domain.Entity.PersonalTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.ToTable("personal_test");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.ToTable("question");
                });

            modelBuilder.Entity("Domain.Entity.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean");

                    b.Property<int>("GoldBalance")
                        .HasColumnType("integer");

                    b.Property<int>("HighSchoolId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("HighSchoolId");

                    b.ToTable("student");
                });

            modelBuilder.Entity("Domain.Entity.StudentTest", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("PersonalTestId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonalGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("JsonResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StudentId", "PersonalTestId", "PersonalGroupId");

                    b.HasIndex("PersonalGroupId");

                    b.HasIndex("PersonalTestId");

                    b.ToTable("student_test");
                });

            modelBuilder.Entity("Domain.Entity.TestQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonalTestId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("QuestionId", "PersonalTestId");

                    b.HasIndex("PersonalTestId");

                    b.ToTable("test_question");
                });

            modelBuilder.Entity("Domain.Entity.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("test_type");
                });

            modelBuilder.Entity("Domain.Entity.Answer", b =>
                {
                    b.HasOne("Domain.Entity.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entity.HighSchool", b =>
                {
                    b.HasOne("Domain.Entity.Region", "Region")
                        .WithMany("HighSchools")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Entity.MajorType", b =>
                {
                    b.HasOne("Domain.Entity.Major", "Major")
                        .WithMany("MajorTypes")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.PersonalGroup", "PersonalGroup")
                        .WithMany("MajorTypes")
                        .HasForeignKey("PersonalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("PersonalGroup");
                });

            modelBuilder.Entity("Domain.Entity.PersonalGroup", b =>
                {
                    b.HasOne("Domain.Entity.TestType", "TestType")
                        .WithMany("PersonalGroups")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("Domain.Entity.PersonalTest", b =>
                {
                    b.HasOne("Domain.Entity.TestType", "TestType")
                        .WithMany("PersonalTests")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.HasOne("Domain.Entity.TestType", "TestType")
                        .WithMany("Questions")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.HasOne("Domain.Entity.HighSchool", "HighSchool")
                        .WithMany("Students")
                        .HasForeignKey("HighSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HighSchool");
                });

            modelBuilder.Entity("Domain.Entity.StudentTest", b =>
                {
                    b.HasOne("Domain.Entity.PersonalGroup", "PersonalGroup")
                        .WithMany("StudentTests")
                        .HasForeignKey("PersonalGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.PersonalTest", "PersonalTest")
                        .WithMany("StudentTests")
                        .HasForeignKey("PersonalTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("StudentTests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalGroup");

                    b.Navigation("PersonalTest");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entity.TestQuestion", b =>
                {
                    b.HasOne("Domain.Entity.PersonalTest", "PersonalTest")
                        .WithMany("TestQuestions")
                        .HasForeignKey("PersonalTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Question", "Question")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalTest");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entity.HighSchool", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entity.Major", b =>
                {
                    b.Navigation("MajorTypes");
                });

            modelBuilder.Entity("Domain.Entity.PersonalGroup", b =>
                {
                    b.Navigation("MajorTypes");

                    b.Navigation("StudentTests");
                });

            modelBuilder.Entity("Domain.Entity.PersonalTest", b =>
                {
                    b.Navigation("StudentTests");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("Domain.Entity.Region", b =>
                {
                    b.Navigation("HighSchools");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Navigation("StudentTests");
                });

            modelBuilder.Entity("Domain.Entity.TestType", b =>
                {
                    b.Navigation("PersonalGroups");

                    b.Navigation("PersonalTests");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
